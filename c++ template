#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define ll long long int
#define endl "\n"
#define pb push_back
#define mp make_pair
#define ut unsigned int
#define ss second
#define ff first
#define vi vector<int>
#define vl vector<ll>
#define lb lower_bound
#define up upper_bound
#define re return 
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl
#define sp(x)              fixed << setprecision(x)

ll inline power(ll a, ll b, ll p){
    a %= p;
    ll ans = 1;
    while(b>0){
        if(b & 1)
            ans = (ans*a)%p;
        a = (a*a)%p;
        b >>= 1;
    }
    return ans;
}

ll inv(ll n, ll p){
    return power(n,p-2, p);
}

bool inline isprime(ll n) {
    if (n <= 1)  return false;
    if (n <= 3)  return true;
    if (n%2 == 0 || n%3 == 0) return false;
    for (ll i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
    return true;
}

/*ll dp[1000001];
//memset(dp,0,sizeof(dp));

void seive() 
{ 
    // Create a boolean array "prime[0..n]" and initialize 
    // all entries it as true. A value in prime[i] will 
    // finally be false if i is Not a prime, else true.
    memset(dp,0,sizeof(dp));
    ll n=1000000,i;
    bool prime[n+1]; 
    memset(prime, true, sizeof(prime)); 
  
    for (ll p=2; p*p<=n; p++) 
    { 
        // If prime[p] is not changed, then it is a prime 
        if (prime[p] == true) 
        { 
            // Update all multiples of p greater than or  
            // equal to the square of it 
            // numbers which are multiple of p and are 
            // less than p^2 are already been marked.  
            for ( ll i=p*p; i<=n; i += p) 
                prime[i] = false; 
        } 
    } 
   
    dp[1]=1;
    for (int p=2; p<=n; p++){ 
       if (prime[p]==true)
       dp[p]=1+dp[p-1];
       else
       dp[p]=dp[p-1];
    }
} 
bool issorted(int a[],int n){
	int i=0,cnt=0;
	for(i=1;i<n;i++){
		if(a[i]>=a[i-1])
		cnt++;
		else
		return false;
	}
	return true;
}
// ll dp[1000001],powe[1000001];
int binary-search(int a[],int n,int target){
      int low,high,mid;
      low=0;
      high=n-1;
      while(high-low>1){
          mid=(low+high)/2;
          if(a[mid]==target){
            return mid;
          }
       if(a[mid]>target)
          high=mid-1;
       else
          low=mid+1;
     }
   if(a[low]==target)
     return low;
   if(a[high]==target)
     return high;

   return 0;
}
*/
void solve(){
      
}
int main()
{
ios_base::sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);
int t=1 ;
cin >> t;
while(t--) 
{
   solve();
}  
return 0;
}
